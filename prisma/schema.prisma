// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
}

enum Role {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Bank {
    id        String   @id @default(cuid())
    name      String
    code      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Add any other fields you need

    @@map("banks")
}

model Operation {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("operations")
}

model RecoveryType {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("recovery_types")
}

model ProvisionForIncurredLosse {
    id              String   @id @default(cuid())
    criteria        String
    initialDeadline Float
    finalDeadline   Float
    percentageC1    Float
    percentageC2    Float
    percentageC3    Float
    percentageC4    Float
    percentageC5    Float
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("provision_for_incurred_losses")
}

model AdditionalProvisionLevel {
    id              String   @id @default(cuid())
    delayPeriod     String
    initialDeadline Float
    finalDeadline   Float
    percentageC1    Float
    percentageC2    Float
    percentageC3    Float
    percentageC4    Float
    percentageC5    Float
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("additional_provision_levels")
}

model Client {
    id                String       @id @default(uuid())
    personType        PersonType   @default(PF) // PF = Natural Person, PJ = Legal Entity
    name              String
    tradeName         String? // for legal entities
    document          String?       @unique // CPF or CNPJ (store without mask)
    email             String?      @unique
    primaryPhone      String?
    secondaryPhone    String?
    birthDate         DateTime? // for natural person
    stateRegistration String? // for legal entities (inscrição estadual)
    addressId         String?      @unique // optional FK to Address
    address           Address?     @relation(fields: [addressId], references: [id])
    status            ClientStatus @default(ATIVO) // e.g.: ACTIVE, INACTIVE, SUSPENDED
    notes             String? // internal notes
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    deletedAt         DateTime? // example 1:N relation
}

enum ClientStatus {
    ATIVO
    INATIVO
    SUSPENSO
}

enum PersonType {
    PF
    PJ
}

model Address {
    id           String   @id @default(uuid())
    client       Client?  @relation
    clientId     String?
    kind         String? // e.g.: residential, commercial
    street       String?
    number       String?
    complement   String?
    neighborhood String?
    city         String?
    state        String?
    postal_code  String?
    country      String?  @default("BR")
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}
